/**
 * @author Ragger Jonkers <ragger@xs4all.nl>
 * 
 * Write hackable targets to a .txt output file.
 * Sorts on maximum server money, ascending.
 * Dependent on server info file generated by statsOfServers.js
 * 
 */

 import { readCsv, filterData2D, writeAsCsv } from "lib/general.js"; 

 /** @param {NS} ns **/
 export async function main(ns) {
 
     // Parse args
     if(ns.args.length < 2) {
         ns.tprint("Please provide args: -serversFile -outputFile");
         ns.exit();
     }
     
     const serversFile = ns.args[0];
     const outputFile = ns.args[1];
 
     // Get the stats of all servers
     let servers = await readCsv(ns, serversFile);
     servers = servers.map(row => {
         const [server, hackingLevelRequired, numPortsOpenersRequired, 
             securityMin, money] = row;
         return [server, parseInt(hackingLevelRequired), parseInt(numPortsOpenersRequired),
             parseInt(securityMin), money];
     })
 
     servers.shift(); // remove header
 
     const myHackingLevel = ns.getHackingLevel();
     const programs = ["BruteSSH.exe", "FTPCrack.exe", "relaySMTP.exe", "HTTPWorm.exe", "SQLInject.exe"];
     const programsOwned = programs.filter(program => ns.fileExists(program)).length;
 
     // server, hackingLevelRequired, numPortOpenersRequired, securityMin, money
     const filterQuery = {
         0: value => value!=="",
         1: value => value <= myHackingLevel,
         2: value => value <= programsOwned,
         4: value => value > 0
     };
     const possibleTargets = await filterData2D(servers, filterQuery);
     const selectedTargets = possibleTargets.sort((a, b) => a[4] - b[4]);
     const targets = selectedTargets.map(row => [row[0]]);
     await writeAsCsv(ns, outputFile, targets);	
 
 
 }